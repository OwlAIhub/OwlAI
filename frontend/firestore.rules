rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidPhoneAuth() {
      return request.auth != null 
        && request.auth.token.firebase.sign_in_provider == 'phone'
        && request.auth.token.phone_number != null
        && request.auth.token.phone_number != "";
    }
    
    // Contact collection - simple rules
    match /contacts/{contactId} {
      // Allow anyone to create contact submissions
      allow create: if isValidContactSubmission();
      
      // Only admins can read/update (set to false for now)
      allow read, update: if false;
      
      // Never allow deletion
      allow delete: if false;
    }
    
    // Simple contact validation
    function isValidContactSubmission() {
      let data = request.resource.data;
      
      return data.keys().hasAll([
        'name', 'email', 'message', 'inquiryType', 'status', 'createdAt'
      ]) &&
      
      // Basic field validation
      data.name is string && data.name.size() >= 2 && data.name.size() <= 100 &&
      data.email is string && data.email.size() > 0 && data.email.size() <= 255 &&
      data.message is string && data.message.size() >= 10 && data.message.size() <= 5000 &&
      
      // Optional fields
      (!('phone' in data) || (data.phone is string && data.phone.size() <= 20)) &&
      (!('subject' in data) || (data.subject is string && data.subject.size() <= 200)) &&
      (!('company' in data) || (data.company is string && data.company.size() <= 100)) &&
      
      // Enum validation
      data.inquiryType in ['general', 'support', 'partnership', 'feedback', 'feature_request', 'bug_report', 'billing', 'other'] &&
      data.status == 'new' &&
      
      // Timestamp validation
      data.createdAt == request.time;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      
      allow create: if isValidPhoneAuth() 
        && isOwner(userId) 
        && isValidUserProfile()
        && request.resource.data.phoneNumber == request.auth.token.phone_number;
      
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && isValidUserProfile();
      
      allow delete: if false;
    }
    
    function isValidUserProfile() {
      let data = request.resource.data;
      return data.keys().hasAll(['uid', 'phoneNumber', 'createdAt', 'updatedAt', 'lastLoginAt', 'isActive', 'metadata']) &&
             data.uid is string && 
             data.uid == request.auth.uid &&
             data.phoneNumber is string &&
             data.isActive is bool &&
             data.metadata is map;
    }
    
    // Onboarding
    match /onboarding/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      
      allow create, update: if isAuthenticated() 
        && isOwner(userId)
        && isValidOnboardingData();
      
      allow delete: if false;
    }
    
    function isValidOnboardingData() {
      let data = request.resource.data;
      return data.keys().hasAll(['uid', 'exam', 'subject', 'attempt', 'language', 'completedAt', 'createdAt', 'updatedAt', 'isComplete', 'metadata']) &&
             data.uid is string && 
             data.uid == request.auth.uid &&
             data.exam in ['UGC-NET', 'CSIR-NET'] &&
             data.subject is string &&
             data.attempt in ['1st', '2nd', '3rd+'] &&
             data.language in ['English', 'Hinglish'] &&
             data.isComplete is bool &&
             data.metadata is map;
    }
    
    // Chat users
    match /chatUsers/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      
      allow create, update: if isAuthenticated() 
        && isOwner(userId)
        && isValidChatUser();
      
      allow delete: if false;
    }
    
    function isValidChatUser() {
      let data = request.resource.data;
      return data.keys().hasAll(['id', 'email', 'displayName', 'preferences', 'subscription', 'createdAt', 'updatedAt', 'lastActiveAt']) &&
             data.id is string && 
             data.id == request.auth.uid &&
             data.email is string &&
             data.displayName is string &&
             data.preferences is map &&
             data.subscription is map;
    }
    
    // Chat sessions
    match /users/{userId}/chatSessions/{sessionId} {
      allow read: if isAuthenticated() && isOwner(userId);
      
      allow create, update: if isAuthenticated() 
        && isOwner(userId)
        && isValidChatSession();
      
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    function isValidChatSession() {
      let data = request.resource.data;
      return data.keys().hasAll(['id', 'userId', 'title', 'category', 'isPinned', 'isArchived', 'messageCount', 'lastMessage', 'metadata', 'createdAt', 'updatedAt']) &&
             data.id is string &&
             data.userId is string && data.userId == request.auth.uid &&
             data.title is string &&
             data.category in ['study', 'practice', 'general', 'exam-prep'] &&
             data.isPinned is bool &&
             data.isArchived is bool &&
             data.messageCount is number &&
             data.lastMessage is map &&
             data.metadata is map;
    }
    
    // Chat messages
    match /users/{userId}/chatSessions/{sessionId}/messages/{messageId} {
      allow read: if isAuthenticated() && isOwner(userId);
      
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && isValidMessage();
      
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && isValidMessage()
        && request.resource.data.content == resource.data.content;
      
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    function isValidMessage() {
      let data = request.resource.data;
      return data.keys().hasAll(['id', 'sessionId', 'userId', 'content', 'sender', 'type', 'status', 'createdAt', 'updatedAt']) &&
             data.id is string &&
             data.sessionId is string &&
             data.userId is string && data.userId == request.auth.uid &&
             data.content is string &&
             data.sender in ['user', 'ai'] &&
             data.type in ['text', 'image', 'file', 'system'] &&
             data.status in ['sending', 'sent', 'delivered', 'read', 'error'];
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}