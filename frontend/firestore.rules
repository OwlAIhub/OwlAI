rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isTimestamp(value) {
      return value is timestamp;
    }

    // USERS: owner-only
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isOwner(userId) && (
        request.resource.data.createdAt == request.time || isTimestamp(request.resource.data.createdAt)
      ) && (
        request.resource.data.updatedAt == request.time || isTimestamp(request.resource.data.updatedAt)
      );
      allow delete: if false; // prevent hard deletes
    }

    // CONVERSATIONS: owner-only; no hard deletes
    match /conversations/{conversationId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid &&
        (request.resource.data.createdAt == request.time || isTimestamp(request.resource.data.createdAt)) &&
        (request.resource.data.updatedAt == request.time || isTimestamp(request.resource.data.updatedAt)) &&
        request.resource.data.messageCount is int && request.resource.data.isArchived is bool;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if false; // archive instead
    }

    // MESSAGES: owner-only; soft-delete only
    match /messages/{messageId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid &&
        (request.resource.data.createdAt == request.time || isTimestamp(request.resource.data.createdAt)) &&
        (request.resource.data.updatedAt == request.time || isTimestamp(request.resource.data.updatedAt)) &&
        (request.resource.data.isDeleted is bool) && (request.resource.data.type in ['user', 'bot']);
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if false; // enforce soft delete via isDeleted=true
    }

    // STUDY SESSIONS: owner-only
    match /studySessions/{sessionId} {
      allow read, create, update: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow delete: if false;
    }

    // ANALYTICS: read-only to signed-in; write disabled (server only)
    match /analytics/{document=**} {
      allow read: if isSignedIn();
      allow write: if false;
    }
  }
}
