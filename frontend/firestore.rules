rules_version='2'

service cloud.firestore {
  match /databases/{database}/documents {
    // Contact form submissions - allow anyone to create, but not read/update/delete
    match /contacts/{contactId} {
      // Allow anyone to submit a contact form
      allow create: if isValidContactSubmission();
      // Only authenticated admins can read contact submissions
      allow read: if false; // Will be updated when auth is implemented
      // No updates or deletes allowed from client
      allow update, delete: if false;
    }
    
    // Helper function to validate contact form data
    function isValidContactSubmission() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'email', 'message', 'timestamp', 'status']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.email is string && data.email.size() > 0 && data.email.size() <= 255 &&
             data.message is string && data.message.size() > 0 && data.message.size() <= 2000 &&
             data.status == 'new' &&
             data.timestamp == request.time;
    }
    
    // User profiles - allow users to manage their own profile
    match /users/{userId} {
      // Users can read, create, and update their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Validate user profile data structure
      allow create, update: if request.auth != null && 
                              request.auth.uid == userId &&
                              isValidUserProfile();
    }
    
    // Helper function to validate user profile data
    function isValidUserProfile() {
      let data = request.resource.data;
      return data.keys().hasAll(['uid', 'phoneNumber', 'createdAt', 'updatedAt', 'lastLoginAt', 'isActive', 'metadata']) &&
             data.uid is string && data.uid == request.auth.uid &&
             data.phoneNumber is string &&
             data.isActive is bool &&
             data.metadata is map &&
             data.metadata.signUpMethod == 'phone';
    }
    
    // Onboarding data - allow users to manage their own onboarding profile
    match /onboarding/{userId} {
      // Users can read, create, and update their own onboarding data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Validate onboarding data structure
      allow create, update: if request.auth != null && 
                              request.auth.uid == userId &&
                              isValidOnboardingData();
    }
    
    // Helper function to validate onboarding data
    function isValidOnboardingData() {
      let data = request.resource.data;
      return data.keys().hasAll(['uid', 'exam', 'subject', 'attempt', 'language', 'completedAt', 'createdAt', 'updatedAt', 'isComplete', 'metadata']) &&
             data.uid is string && data.uid == request.auth.uid &&
             data.exam is string &&
             data.subject is string &&
             data.attempt is string &&
             data.language is string &&
             data.isComplete is bool &&
             data.metadata is map;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
